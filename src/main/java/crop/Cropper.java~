package crop;

import java.awt.image.BufferedImage;  // cropping
import java.awt.Color;                // dealing with color of our image
import javax.imageio.ImageIO;         // reading in image
import java.io.File;                  // files
import java.io.IOException;           // exceptions

/**
 * Handles cropping of BufferedImages
 */ 
public class Cropper {
  private int x, y, width, height;      // dimensions of the initial crop
  private BufferedImage img;            // image we wish to crop
  private final String OUTPUT = "out";  // output directory

  /**
   * Sets the dimensions of our initial crop and creates our output directory
   */ 
  public Cropper(int x, int y, int width, int height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;

    // create output directory if not already there
    new File(OUTPUT).mkdir();
  }

  /**
   * Read in the file as a BufferedImage
   */ 
  private void loadImage(File file) {
    try {
      img = ImageIO.read(file);
    } catch (IOException e) {
      System.out.println("Exception thrown: " + e);
    }
  }

  /**
   * Writes image to the output folder
   */
  private void writeImage(String name) {
    try {
      File outFile = new File("out/" + name);
      ImageIO.write(img, "png", outFile);
      System.out.println("Wrote image: " + name);
    } catch (IOException e) {
      System.out.println("Exception Thrown: " + e);
    }
  }

  /**
   * Crops the image and puts it in our buffer
   */
  private void crop() {
    img = img.getSubimage(x, y, width, height);
  }

  /**
   * Follows the initial crop so as to chop off additional blank space
   */
  private void autoCrop() {
    int xPos    = img.getWidth(), 
        yPos    = img.getHeight(),
        width   = 0, 
        height  = 0;

    for (int y = 0; y < img.getHeight(); y++) {
      // extract a line of pixels
      int[] pixels = img.getRGB(0, y, img.getWidth(), 1, null, 0, img.getWidth());

      // refine our new sub-image
      for (int x = 0; x < pixels.length; x++) {
       int alpha = new Color(img.getRGB(x, y), true).getAlpha(); 
       if (alpha != 0) {
         xPos = x < xPos ? x : xPos;
         yPos = y < yPos ? y : yPos;
         width = x > width ? x : width;
         height = y > height ? y : height;
       }
      }
    }

    // create a new sub-image based on found info
    img = img.getSubimage(xPos, yPos, width - xPos, height - yPos);
  }

  /**
   * Changes the color of each individual pixel
   */
  private void colorChange() {
    for (int x = 0; x < img.getWidth(); x++) {
      for (int y = 0; y < img.getHeight(); y++ ) {
        int alpha = new Color(img.getRGB(x, y), true).getAlpha();
        if (alpha != 0) {
          img.setRGB(x, y, new Color(181, 50, 50, alpha).getRGB());
        }
      }
    } 
  }

  /**
   * Convert image to a red checkered pattern
   */
  private void checker() {
    int color = new Color(255, 0, 0).getRGB(),
        yStart = 0;

    for (int x = 0; x < img.getWidth(); x++) {
      for (int y = yStart; y < img.getHeight(); y += 2) {
        img.setRGB(x, y, color);
      }
      yStart = yStart == 0 ? 1 : 0;
    }
  }

  /**
   * Mass loads and converts files
   */
  public void convert(String dir) {
    // grab all files from given directory
    File[] files = new File(dir).listFiles();

    // check if valid directory, quit if not
    if (files == null) {
      System.out.println("Invalid directory: " + dir);
      System.exit(0);
    }

    // perform conversions for all files
    for (int i = 0; i < files.length; i++) {
      if (files[i].isFile()) {

        loadImage(files[i]);
        if (img != null) {
          crop();
          autoCrop();
          //checker();
          colorChange();
          writeImage(files[i].getName());
        }
      }
    }
  }
}

